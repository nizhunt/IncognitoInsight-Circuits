{"debug_symbols":[{"locations":{"162":[{"span":{"start":447,"end":501},"file":1}],"163":[{"span":{"start":447,"end":501},"file":1}],"164":[{"span":{"start":447,"end":501},"file":1}],"165":[{"span":{"start":447,"end":501},"file":1}],"166":[{"span":{"start":447,"end":501},"file":1}],"167":[{"span":{"start":447,"end":501},"file":1}],"168":[{"span":{"start":559,"end":706},"file":1}],"169":[{"span":{"start":719,"end":734},"file":1}]}}],"file_map":{"1":{"source":"use dep::std;\nuse dep::ecrecover;\n\nfn main(\n    challenger_address: pub Field,\n    platform: pub Field,\n    holdings: pub [Field; 5],\n    expected_profit_percentage: pub u32,\n    actual_profit_percentage: u32,\n    solver_nickname: pub Field,\n    hashed_message: [u8; 32],\n    pub_key_x_solver: [u8; 32],\n    pub_key_y_solver: [u8; 32],\n    signature_solver: [u8; 64],\n) {\n    // Ensure the actual profit is at least as much as expected\n    assert(actual_profit_percentage >= expected_profit_percentage);\n\n    // Verify the signature\n    let valid_signature = std::ecdsa_secp256k1::verify_signature(\n        pub_key_x_solver,\n        pub_key_y_solver,\n        signature_solver,\n        hashed_message,\n    );\n    assert(valid_signature);\n}\n\nfn verification(\n    hashed_message: [u8; 32],\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64],\n) {\n    // Verify the signature\n    let valid_signature = std::ecdsa_secp256k1::verify_signature(\n        pub_key_x,\n        pub_key_y,\n        signature,\n        hashed_message,\n    );\n    assert(valid_signature);\n}\n","path":"/Users/nishantsingh/Code/IncognitoInsight/circuits/src/main.nr"}},"warnings":[]}